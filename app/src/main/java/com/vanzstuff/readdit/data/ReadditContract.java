package com.vanzstuff.readdit.data;

import android.content.ContentUris;
import android.net.Uri;
import android.provider.BaseColumns;

import com.vanzstuff.readdit.Logger;

/**
 * App contract
 */
public class ReadditContract {

    public static final String CONTENT_AUTHORITY = "com.vanzstuff.readdit.provider";
    public static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);
    public static final String PATH_TAG = "tag";
    public static final String PATH_POST = "post";
    public static final String PATH_POST_BY_TAG = "post_tag" ;
    public static final String PATH_POST_BY_TAGID = "post_tagid" ;
    public static final String PATH_ADD_TAG_TO_POST = "post_add_tag";
    public static final String PATH_ADD_TAG_NAME_TO_POST = "post_add_tag_name";
    public static final String PATH_COMMENT = "comment";
    public static final String PATH_SUBREDDIT = "subreddit";
    public static final String PATH_USER = "user";
    public static final String PATH_VOTE = "vote";
    public static final String MULTIPLE_ITEM_MIMETYPE = "vnd.android.cursor.dir/";
    public static final String SINGLE_ITEM_MIMETYPE = "vnd.android.cursor.item/";


    /**
     * table stores all tags created by the user
     */
    public static final class Tag implements BaseColumns{

        public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_TAG).build();
        public static final String CONTENT_TYPE = MULTIPLE_ITEM_MIMETYPE + CONTENT_AUTHORITY + "/" + PATH_TAG;

        public static Uri buildTagUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI, id);
        }

        /**
         * Get the tag ID from the Uri generated by buildTagUri
         * @param uri uri generated by buildTagUri
         * @return -1 if could not retrieve the the id. Otherwise, return the id
         */
        public static long getTagId(Uri uri){
            if ( uri.getPathSegments().size() == 2)
                return Long.parseLong(uri.getPathSegments().get(1));
            return -1l;
        }

        public static final String TABLE_NAME = "tag";
        public static final String COLUMN_NAME = "name";
    }

    /**
     * table stores all post tagged/saved by the user
     */
    public static final class Post implements BaseColumns{

        /** Uri used to retrieve all post */
        public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_POST).build();
        public static final Uri CONTENT_URI_POST_BY_TAG = BASE_CONTENT_URI.buildUpon().appendPath(PATH_POST_BY_TAG).build();
        public static final Uri CONTENT_URI_POST_BY_TAGID = BASE_CONTENT_URI.buildUpon().appendPath(PATH_POST_BY_TAGID).build();
        public static final Uri CONTENT_URI_ADD_TAG_TO_POST = BASE_CONTENT_URI.buildUpon().appendPath(PATH_ADD_TAG_TO_POST).build();
        public static final Uri CONTENT_URI_ADD_TAG_NAME_TO_POST = BASE_CONTENT_URI.buildUpon().appendPath(PATH_ADD_TAG_NAME_TO_POST).build();
        public static final String CONTENT_TYPE = MULTIPLE_ITEM_MIMETYPE +  CONTENT_AUTHORITY + "/" + PATH_POST;
        public static final String CONTENT_TYPE_POST_BY_TAG = MULTIPLE_ITEM_MIMETYPE +  CONTENT_AUTHORITY + "/" + PATH_POST_BY_TAG;


        /**
         * Build a Uri with the last segment of the path is the post ID
         * @param id
         * @return uri with the post ID
         */
        public static Uri buildPostUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI, id);
        }

        /**
         * Get the post ID from the Uri generated by buildPostUri
         * @param uri uri generated by buildPostUri
         * @return -1 if could not retrieve the the id. Otherwise, return the id
         */
        public static long getPostId(Uri uri){
            if ( uri.getPathSegments().size() == 2)
                return Long.parseLong(uri.getPathSegments().get(1));
            return -1l;
        }

        /**
         * Build a uri to retrieve the post from a given tag
         * @param tag used to retrieve the posts
         * @return Uri to retrieve the posts
         */
        public static Uri buildPostByTagUri(String tag){
            return CONTENT_URI_POST_BY_TAG.buildUpon().appendPath(tag).build();
        }
        
        /**
         * Get the tag from Uri created by the method buildPostByTagUri
         * @param uri that holds the tag
         * @return tag retrieved
         */
        static String getTagFromUri(Uri uri){
            return uri.getPathSegments().get(2);
        }

        /**
         * Build the Uri used to add the given tagID to the given postID
         * @param postID
         * @param tagID
         * @return
         */
        public static Uri buildAddTagUri(long postID, long tagID){
            return CONTENT_URI_ADD_TAG_TO_POST.buildUpon()
                    .appendPath(String.valueOf(postID))
                    .appendPath(String.valueOf(tagID)).build();
        }

        public static Uri buildAddTagUri(long postID, String tag){
            return CONTENT_URI_ADD_TAG_NAME_TO_POST.buildUpon()
                    .appendPath(String.valueOf(postID))
                    .appendPath(String.valueOf(tag)).build();
        }

        /**
         * Method used to get the tag and post ids from the Uri generate by buildAddTagUri method
         * @param uri generated by buildAddTagUri
         * @return long[] where the first position contains the post id and the second one the tag
         * id
         */
        public static long[] getTagIdAndPostIdFromUri(Uri uri){
            return new long[]{
                    Long.parseLong(uri.getPathSegments().get(1)),
                    Long.parseLong(uri.getPathSegments().get(2))
            };
        }

        /**
         * Method used to get the tag and post ids from the Uri generate by buildAddTagUri method
         * @param uri generated by buildAddTagUri
         * @return String[] where the first position contains the post id and the second one the tag
         * id
         */
        public static String[] getTagNameFromUri(Uri uri){
            return new String[]{
                    uri.getPathSegments().get(1),
                    uri.getPathSegments().get(2)
            };
        }

        /**
         * Build a uri to retrieve the post from a given tag id
         * @param tagId id used to retrieve the posts
         * @return Uri to retrieve the posts
         */
        public static Uri buildPostByTagIdUri(long tagId){
            return CONTENT_URI_POST_BY_TAGID.buildUpon().appendPath(String.valueOf(tagId)).build();
        }

        /**
         * Get the tag from Uri created by the method buildPostByTagIdUri
         * @param uri that holds the tag
         * @return tag retrieved
         */
        static String getTagIdFromUri(Uri uri){
            return uri.getPathSegments().get(1);
        }

        public static final String TABLE_NAME = "post";
        public static final String COLUMN_TITLE = "title";
        public static final String COLUMN_SUBREDDIT = "subreddit";
        public static final String COLUMN_CONTENT = "content";
        public static final String COLUMN_USER = "user";
        public static final String COLUMN_VOTES = "votes";
        public static final String COLUMN_THREADS = "threads";
        public static final String COLUMN_DATE = "date";
        public static final String COLUMN_CONTENT_TYPE = "content_type";
    }

    public static final class TagXPost implements BaseColumns{
        public static final String TABLE_NAME = "tag_x_post";
        public static final String COLUMN_TAG = "tag";
        public static final String COLUMN_POST = "post";
    }

    /**
     * Table stores all comments ( and its parents ) saved by the user
     */
    public static final class Comment implements BaseColumns{
        public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_COMMENT).build();
        public static final String CONTENT_TYPE = MULTIPLE_ITEM_MIMETYPE + CONTENT_AUTHORITY + "/" + PATH_COMMENT;

        public static Uri buildCommentUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI, id);
        }

        /**
         * Get the user ID from the Uri generated by buildCommentUri
         * @param uri uri generated by buildCommentUri
         * @return -1 if could not retrieve the the id. Otherwise, return the id
         */
        public static long getCommentId(Uri uri){
            if ( uri.getPathSegments().size() == 2)
                return Long.parseLong(uri.getPathSegments().get(1));
            return -1l;
        }

        public static final String TABLE_NAME = "comment";
        public static final String COLUMN_PARENT = "parent";
        public static final String COLUMN_CONTENT = "content";
        public static final String COLUMN_USER = "user";
        public static final String COLUMN_POST = "post";
        public static final String COLUMN_DATE = "date";
    }

    /**
     * Table stores all user subscribes
     */
    public static final class Subreddit implements BaseColumns{
        public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_SUBREDDIT).build();
        public static final String CONTENT_TYPE = MULTIPLE_ITEM_MIMETYPE + CONTENT_AUTHORITY + "/" + PATH_SUBREDDIT;

        public static Uri buildSubscribeUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI, id);
        }

        public static final String TABLE_NAME = "subreddit";
        public static final String COLUMN_NAME = "subreddit";
        public static final String COLUMN_LAST = "last";
    }

    /**
     * Table stores the votes of the user
     */
    public static final class Vote implements BaseColumns{
        public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_VOTE).build();
        public static final String CONTENT_TYPE = MULTIPLE_ITEM_MIMETYPE + CONTENT_AUTHORITY + "/" + PATH_VOTE;
        public static final String TABLE_NAME = "vote";
        /**
         * The post voted
         * Type: long
         */
        public static final String COLUMN_POST = "post";
        /**
         * The user that has voted in the post
         * Type: long
         */
        public static final String COLUMN_USER = "user";
        /**
         * The direction of the vote ( up or down )
         * Type: int
         */
        public static final String COLUMN_DIRECTION = "direction";


        public static Uri buildVoteUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI, id);
        }

        /**
         * Get the vote ID from the Uri generated by buildVoteUri
         * @param uri uri generated by buildVoteUri
         * @return -1 if could not retrieve the the id. Otherwise, return the id
         */
        public static long getVoteId(Uri uri){
            if ( uri.getPathSegments().size() == 2)
                return Long.parseLong(uri.getPathSegments().get(1));
            return -1l;
        }
    }

    /**
     * Table stores the the users
     */
    public static final class User implements BaseColumns{
        public static final Uri CONTENT_URI = BASE_CONTENT_URI.buildUpon().appendPath(PATH_USER).build();
        public static final String CONTENT_TYPE = MULTIPLE_ITEM_MIMETYPE + CONTENT_AUTHORITY + "/" + PATH_USER;
        public static final String TABLE_NAME = "user";
        /**
         * User name
         * Type: string
         */
        public static final String COLUMN_NAME = "name";
        /**
         * The curent user's access token
         * Type: string
         */
        public static final String COLUMN_ACCESSTOKEN = "user";
        /**
         * Flag idicate if the user is the current user
         * Type: boolean
         */
        public static final String COLUMN_CURRENT = "current";


        public static Uri buildUserUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI, id);
        }

        /**
         * Get the vote ID from the Uri generated by buildUserUri
         * @param uri uri generated by buildUserUri
         * @return -1 if could not retrieve the the id. Otherwise, return the id
         */
        public static long getUserId(Uri uri){
            if ( uri.getPathSegments().size() == 2)
                return Long.parseLong(uri.getPathSegments().get(1));
            return -1l;
        }
    }
}
